{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Week 4 - Introduction to the Jupyter Notebook and Python #\n",
    "\n",
    "\n",
    "## What is Python? and why do we teach it? ##\n",
    "\n",
    "Python (which is named after Monty Python) is an interpreted \"general-purpose\" programming language, \n",
    "created by Guido van Rossum and first released in 1991. \n",
    "Python runs on all major (and most minor) operating systems and is used for the day-to-day work in a range of disciplines, including sientific computation, data science, statistics, machine learning, pure mathematics, financial technologies, web and app development and many more.\n",
    "\n",
    "It is currently (August 2020) the third most popular programming language, after C and Java and before C++, which it beat in 2019. \n",
    "\n",
    "It has a very simple syntax (grammar) and it is easy to focus on what the programs do rather than how to write them down (similar to the flowcharts and pseudo code we looked at earlier).\n",
    "\n",
    "All this means that, whether or not you intend to continue your career after the university either inside or outside academia you will have a clear advantage, with a basic foundation in Python.\n",
    "\n",
    "## Installing/Running Python ##\n",
    "\n",
    "Most people who has to do some programming these days use some form of IDE, or Integrated Development Environment. This is an application that enbles code editing as well as execution and displaying outputs, and often has a lot of builtin helpers for writing code and debugging etc. \n",
    "\n",
    "Some examples of IDEs are: \n",
    "- Jupyter (https://jupyter.org/)\n",
    "- Spyder (https://www.spyder-ide.org/)\n",
    "- PyCharm (https://www.jetbrains.com/pycharm/)\n",
    "\n",
    "\n",
    "In this module we will recommend that at least in the beginning you use the Jupyter Notebook environment, partly because it is much easier to learn than any of the other platforms. \n",
    "If you have previous experience working with Python using a different environment you can continue working in the way you are used to for the most part but you will need to hand in **coursework in the Jupyter Notebook format**.\n",
    "\n",
    "\n",
    "## Jupyter ##\n",
    "\n",
    "Jupyter is slightly different from other IDEs in that it works with a Notebook in a browser window.\n",
    "The notebook format combines input and output in the same level instead of using separate windows. It can also easly be exported to PDF or HTML format, making it ideal for presenting material. \n",
    "Together with options using it on free online services this is most likely why Jupyter is currently very popular in data science. \n",
    "\n",
    "\n",
    "It is possible to install Jupyter on your own computer by installing the Anaconda distribution https://anaconda.com/products/individual. The \"Individual Edition is free and available for both Windows, MacOS and Linux.   \n",
    "\n",
    "Another alternative is to use notebooks in the cloud. There are anumber of options, including: \n",
    "- Google Colab https://colab.research.google.com/ \n",
    "- Cocalc https://cocalc.com (this has more features than Google Colab (and in particular has functionality for pure mathematics) but the free version comes with some performance issues.\n",
    "\n",
    "\n",
    "## Spyder ##\n",
    "This is specifically targeted for scientific computing with python.\n",
    "\n",
    "To install Spyder on your own computer it is easiest to install the Anaconda distribution mentioned above.\n",
    "\n",
    "## PyCharm ##\n",
    "PyCharm is fully featured IDE that is part of a larger suit of tools for different kinds of programming languges and is more suited for professional developers.\n",
    "However, students can download a free version and there is also an educational version that, for instance, includes builtin tutorials. \n",
    "\n",
    "To install PyCharm Professional or PyCharm Edu (for education), just head to https://www.jetbrains.com/pycharm or https://www.jetbrains.com/pycharm-edu/ and click Download.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Jupyter Notebooks \n",
    "\n",
    "Most learning material for Python will be in the form of Jupyter notebooks and you will need to submit assessed and unassessed coursework in this format as well. It is therefore really important that you get the hang of basic functionality. \n",
    "\n",
    "## Running and viewing a notebook \n",
    " \n",
    "To open a notebook (like this notebook - a file with ending .ipynb) simply download it to your computer and start a Jupyter notebook session on your laptop (for instance open the \"Anaconda Navigator\" and click \"Launch\" for the Notebook application.\n",
    "From the Notebook aplication top page simply navigate to the downloaded notebook and click on its name. This will open up the notebook. \n",
    "\n",
    "We will only provide a brief overview below. For more information see the official documentation at [Jupyter Notebook](https://jupyter-notebook.readthedocs.io/)\n",
    "and in particular [Notebook Basics](https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html) \n",
    "\n",
    "## The structure of a Notebook \n",
    "\n",
    "A Jupyter notebook is divided into so-called \"Cells\" of three different types:\n",
    "1. Code cells - these are cells that are evaluated and contain Python code\n",
    "2. Text cells - these are cells which contains text in Markdown format.\n",
    "3. Result (Output) cells - displays the result of evaluating a code or text cell.\n",
    "\n",
    "Note that the result of a code cell appears in a new cell below the current cell while the result of a text cell appears in the same cell (as formatted text)\n",
    "\n",
    "This cell is a text cell and below is a code cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1 + 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Some examples of Python (we will only start it for real next week) ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Printing and \"explicit\" output will appear in the following output cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"2\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comments in Python begin with # and will not appear in the output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "1+1\n",
    "# This is a comment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variables can simply be defined by assigning names to values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Functions in Python are defined using the notation `def f(): ...`\n",
    "\n",
    "NOTE: the body of the function must be **indented**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    return x**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For loops in Python uses a simple `for x in ...: ... ` notation\n",
    "\n",
    "Note: the body of the loop also needs to be indented "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "summa = 0\n",
    "for x in [1,2,3]:\n",
    "    summa = summa + x\n",
    "print(summa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All standard arithemtic operations can be used:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y - 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "3 ** 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Interacting with the notebook \n",
    "Jupyter notebooks have two *modes* \n",
    "1. Edit mode: this is indicated by giving the cell a green border and there is a cursor in the cell.\n",
    "2. Command mode: this is indicated by a blue border and no cursor in the cell.\n",
    "\n",
    "In Edit mode you can edit the text or formulas etc. \n",
    "\n",
    "In Command mode you can for instance create new cells (either 'a' for a cell above the current, or 'b' for one below the current) or delete a cell (press 'd' twice). There are many more things you can do in command mode and you can find all commands in the Menu bar on the top of the page. \n",
    "\n",
    "\n",
    "You can switch between the modes by pressing the \"Escape\" key or clicking in left the margin to enter the Command mode and clicking in the cell to enter the Edit mode. \n",
    "\n",
    "If the current cell is a Text cell \"result\" that is evaluated ten you need to double click in the cell to enter the Edit mode. \n",
    "\n",
    "## Evaluating Cells\n",
    "You can evaluate (in other words \"run\") a cell by either being in Edit mode and click \"Shift + Enter\" or pressing the \"Run\" button or select the \"run cells\" menu item on the top of th page. \n",
    "\n",
    "# Text Cells and Markdown#\n",
    "\n",
    "Text cells can contain Markdown, which is language that allows for a simple form of formatting. For instance\n",
    "\n",
    "## Headings\n",
    "\n",
    "``` \n",
    "# Section Heading \n",
    "```\n",
    "becomes\n",
    "# Section Heading\n",
    "\n",
    "```\n",
    "## Subsection Heading \n",
    "```\n",
    "becomes \n",
    "## Subsection Heading\n",
    "\n",
    "\n",
    "## Lists\n",
    "\n",
    "An unordered list can be written as\n",
    "```\n",
    "- Apples \n",
    "- Oranges\n",
    "```\n",
    "and produces \n",
    "- Apples \n",
    "- Oranges\n",
    "\n",
    "Ordered lists are given by\n",
    "```\n",
    "1. Apples\n",
    "2. Oranges\n",
    "```\n",
    "1. Apples\n",
    "2. Oranges\n",
    "\n",
    "Note that the numbering is automatic and \n",
    "\n",
    "```\n",
    "1. Apples\n",
    "8. Oranges\n",
    "```\n",
    "\n",
    "also produces\n",
    "\n",
    "1. Apples\n",
    "8. Oranges\n",
    "\n",
    "It is also possible to write bold and italic text:\n",
    "\n",
    "```this sentence has a word in *italics*```\n",
    "\n",
    "this sentence has a *word* in italics\n",
    "\n",
    "`and this one has a word in **bold**`\n",
    "\n",
    "and this one has a word in **bold**\n",
    "\n",
    "\n",
    "## LaTeX\n",
    "\n",
    "A very important feature of Jupyter note books text cells for mathematicians is that in addition to tthe simple Markdown formatting they also allow for embeding so-called **LaTeX** code. \n",
    "\n",
    "**LaTeX** is a very powerful typesetting language that is used to produce almost all mathematical books and research articles. For the moment we will only use a small fraction of the full capabilities of this languge \n",
    "but you will certainly come back to it later when it is time to write projct reports and disertations. \n",
    "\n",
    "Mathematical symbols can be embedded in running text by using single $-signs, like so: \n",
    "\n",
    "`The set of integers is denoted by $\\mathbb{Z}$ and is contained in the set of real numbers $\\mathbb{R}$.`\n",
    "\n",
    "The set of integers is denoted by $\\mathbb{Z}$ and is contained in the set of real numbers $\\mathbb{R}$.\n",
    "\n",
    "Displayed equations are written using double $-signs:\n",
    "\n",
    "```\n",
    "$$ \n",
    "\\left( \\begin{matrix} a & b \\\\ c & d \\end{matrix} \\right) ^{-1} = \n",
    "\\frac{1}{ad-bc} \\left( \\begin{matrix} d & -b \\\\ -c & a \\end{matrix} \\right) \n",
    "\\; \n",
    "\\text{if}\n",
    "\\; ad-bc \\ne 0\n",
    "$$\n",
    "```\n",
    "$$ \n",
    "\\left( \\begin{matrix} a & b \\\\ c & d \\end{matrix} \\right) ^{-1} = \n",
    "\\frac{1}{ad-bc} \\left( \\begin{matrix} d & -b \\\\ -c & a \\end{matrix} \\right)\n",
    "\\; \n",
    "\\text{if}\n",
    "\\; ad-bc \\ne 0,\n",
    "$$\n",
    "or another example\n",
    "```\n",
    "$$ \\int_{0}^{\\infty} x \\sin(x) dx =?$$\n",
    "```\n",
    "$$ \\int_{0}^{\\infty} x \\sin(x) dx =?$$\n",
    "\n",
    "\n",
    "## Code\n",
    "Code can be typeset with triple-single-quotation marks:\n",
    "    ```\n",
    "    def f(x):\n",
    "        return x+1        \n",
    "    ```\n",
    "which produces\n",
    "```\n",
    "def f(x):\n",
    "    return x+1        \n",
    "```\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to get help inside a notebook #\n",
    "\n",
    "Everything in Python has some number of properties and has some kind of documentation that often tells you which properties it has and how to use them.\n",
    "\n",
    "Python supports two ways to get information and help immediately from a command line:\n",
    "\n",
    "## .-tab completion: ##\n",
    "\n",
    "If x is defined, then typing \n",
    "    \n",
    "```\n",
    "x.<tab>\n",
    "```\n",
    "    \n",
    "    (i.e. type 'x.' and press the tab key) will give a list of all available properties of x.\n",
    "    \n",
    "**Example**:\n",
    "    \n",
    "``` \n",
    "        In: x=1.0\n",
    "        In: x.<tab>\n",
    "                   as_integer_ratio() hex()              real\n",
    "                   conjugate()        imag\n",
    "                   fromhex()          is_integer()\n",
    "     ```\n",
    "      \n",
    "      This shows that x has 5 functions and two properties (`imag` and `real`) attached to it. \n",
    "      We can try one:\n",
    "```\n",
    "In: x.is_integer()\n",
    "Out: True\n",
    "```\n",
    "## ? - documentation: ##\n",
    "Typing ? before or after an object will give the documentation for that object.\n",
    "    Note that this information might appear in a separate frame below the notebook instead of in a cell.\n",
    "\n",
    "**Example**:\n",
    "    \n",
    "``` \n",
    "       In: x=1.0\n",
    "       In: x?\n",
    "       -\n",
    "       Type:        float\n",
    "       String form: 1.0\n",
    "       Docstring:   Convert a string or number to a floating point number, if possible.\n",
    "    ```\n",
    "    This shows that x has the type float. We can also use this to see that some of the functions do:\n",
    "```\n",
    "    In: x.as_integer_ratio?\n",
    "    -\n",
    "    Signature: x.as_integer_ratio()\n",
    "    Docstring:\n",
    "    Return integer ratio.\n",
    "\n",
    "    Return a pair of integers, whose ratio is exactly equal to the original float\n",
    "    and with a positive denominator.\n",
    "\n",
    "    Raise OverflowError on infinities and a ValueError on NaNs.\n",
    "\n",
    "    >>> (10.0).as_integer_ratio()\n",
    "    (10, 1)\n",
    "    >>> (0.0).as_integer_ratio()\n",
    "    (0, 1)\n",
    "    >>> (-.25).as_integer_ratio()\n",
    "    (-1, 4)\n",
    "    Type:      builtin_function_or_method\n",
    "```\n",
    "    \n",
    "- Comments: Everything on a line after '#' is ignored by Python.\n",
    "- Assignment: `x=1` will set the variable `x` to the value 1.\n",
    "- Simple print statements: \n",
    "    - `print(x)`  will print the variable x\n",
    "    - simply typing x and pressing enter will also print x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=(1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x.as_integer_ratio()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercises #\n",
    "The following exercises are fairly simple and can be done using material and examples found in this notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise ##\n",
    "Write Python code that prints out the string \"Hello world\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code can be written here, below this line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise ##\n",
    "Write Python code that prints out the square of all integers from 1 to 10. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code can be written here, below this line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercise ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Create a New Notebook which includes a markdown cell that contains text and an image.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
